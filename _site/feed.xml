<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-17T10:03:52+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">James Chen</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">Hello World</title><link href="http://localhost:4000/blog/2019/01/16/hello-world-from-james" rel="alternate" type="text/html" title="Hello World" /><published>2019-01-16T14:01:00+08:00</published><updated>2019-01-16T14:01:00+08:00</updated><id>http://localhost:4000/blog/2019/01/16/hello-world-from-james</id><content type="html" xml:base="http://localhost:4000/blog/2019/01/16/hello-world-from-james">&lt;h2 id=&quot;你好世界&quot;&gt;你好，世界！&lt;/h2&gt;
&lt;p&gt;Hey！大家好，这是我的第一篇BLOG。&lt;br /&gt;
开通这个BLOG主要是为了在学习过程中记录一些知识点，方便记忆，并希望以此激励自己坚持下去，加油！&lt;/p&gt;</content><author><name>james</name></author><category term="blog" /><category term="something else" /><summary type="html">你好，世界！ Hey！大家好，这是我的第一篇BLOG。 开通这个BLOG主要是为了在学习过程中记录一些知识点，方便记忆，并希望以此激励自己坚持下去，加油！</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">基础内容</title><link href="http://localhost:4000/blog/2019/01/16/swfit-basic" rel="alternate" type="text/html" title="基础内容" /><published>2019-01-16T14:01:00+08:00</published><updated>2019-01-16T14:01:00+08:00</updated><id>http://localhost:4000/blog/2019/01/16/swfit-basic</id><content type="html" xml:base="http://localhost:4000/blog/2019/01/16/swfit-basic">&lt;h2 id=&quot;基础内容&quot;&gt;基础内容&lt;/h2&gt;
&lt;h3 id=&quot;输出常量和变量&quot;&gt;输出常量和变量&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print(_:separator:terminator:)&lt;/code&gt;默认在行末添加换行符结束输出，若不想换行，就传入空的换行符作为结束，例：&lt;code class=&quot;highlighter-rouge&quot;&gt;print(someValue, terminator: &quot;&quot;)&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;数值型字面量&quot;&gt;数值型字面量&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;一个十进制数，没有前缀&lt;/li&gt;
  &lt;li&gt;一个二进制数，前缀是 0b&lt;/li&gt;
  &lt;li&gt;一个八进制数，前缀是 0o&lt;/li&gt;
  &lt;li&gt;一个十六进制数，前缀是 0x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;十进制娄与 exp 的指数，结果就等于基数乘以10&lt;sup&gt;exp&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.25e2 意味着 1.25 x 102, 或者 125.0&lt;/li&gt;
  &lt;li&gt;1.25e-2  意味着 1.25 x 10-2, 或者 0.0125&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;整数和浮点数都可以添加额外的零或者添加下划线来增加代码的可读性。下面的这些格式都不会影响字面量的值：&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let paddedDouble = 000123.456&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let oneMillion = 1_000_000&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let justOverOneMillion = 1_000_000.000_000_1&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;整数和浮点数转换&quot;&gt;整数和浮点数转换&lt;/h3&gt;
&lt;p&gt;在用浮点数初始化一个新的整数类型的时候，数值会被截断。也就是说 &lt;code class=&quot;highlighter-rouge&quot;&gt;4.75&lt;/code&gt; 会变成 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;， &lt;code class=&quot;highlighter-rouge&quot;&gt;-3.9&lt;/code&gt; 会变为 &lt;code class=&quot;highlighter-rouge&quot;&gt;-3&lt;/code&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;类型别名&quot;&gt;类型别名&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;类型别名&lt;/strong&gt;可以为已经存在的类型定义了一个新的可选名字。用 typealias 关键字定义类型别名。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typealias AudioSample = UInt16&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var maxAmplitudeFound = AudioSample.min&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;</content><author><name>james</name></author><category term="blog" /><category term="swift" /><summary type="html">基础内容 输出常量和变量 print(_:separator:terminator:)默认在行末添加换行符结束输出，若不想换行，就传入空的换行符作为结束，例：print(someValue, terminator: &quot;&quot;)。 数值型字面量 一个十进制数，没有前缀 一个二进制数，前缀是 0b 一个八进制数，前缀是 0o 一个十六进制数，前缀是 0x 十进制娄与 exp 的指数，结果就等于基数乘以10exp: 1.25e2 意味着 1.25 x 102, 或者 125.0 1.25e-2 意味着 1.25 x 10-2, 或者 0.0125</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/swift_logo.png" /></entry><entry><title type="html">字符串和字符</title><link href="http://localhost:4000/blog/2019/01/16/swfit-strings-charaters" rel="alternate" type="text/html" title="字符串和字符" /><published>2019-01-16T14:01:00+08:00</published><updated>2019-01-16T14:01:00+08:00</updated><id>http://localhost:4000/blog/2019/01/16/swfit-strings-charaters</id><content type="html" xml:base="http://localhost:4000/blog/2019/01/16/swfit-strings-charaters">&lt;h2 id=&quot;字符串和字符&quot;&gt;字符串和字符&lt;/h2&gt;
&lt;h3 id=&quot;字符字面量&quot;&gt;字符字面量&lt;/h3&gt;
&lt;p&gt;✯ 要让多行字符串字面量开始或结束带有换行，写一个空行作为第一行或者是最后一行。比如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;&quot;&quot;
  
This string starts with a line feed.  
It also ends with a line feed.  

&quot;&quot;&quot;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;多行字符串可以缩进以匹配周围的代码。三引号（ “”” ）前的空格会告诉 Swift 其他行前应该有多少空白是需要忽略的。如果你在某行的空格超过了结束的三引号（ “”” ），那么这些空格会被包含。&lt;/p&gt;

&lt;h3 id=&quot;操作字符&quot;&gt;操作字符&lt;/h3&gt;
&lt;p&gt;String值可以通过传入 Character值的字符串作为实际参数到它的初始化器来构造：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 let catCharacters: [Character] = [&quot;C&quot;, &quot;a&quot;, &quot;t&quot;, &quot;!&quot;, &quot;?&quot;] ////必须声明类型
2 let catString = String(catCharacters)
3 print(catString)
4 // prints &quot;Cat!?&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;字符串索引&quot;&gt;字符串索引&lt;/h3&gt;
&lt;p&gt;每一个 String值都有相关的索引类型， String.Index，它相当于每个 Character在字符串中的位置。&lt;/p&gt;

&lt;p&gt;使用 startIndex属性来访问 String中第一个 Character的位置。 endIndex属性就是 String中最后一个字符后的位置。&lt;/p&gt;

&lt;p&gt;使用 index(before:) 和 index(after:) 方法来访问给定索引的前后。要访问给定索引更远的索引，你可以使用 index(_:offsetBy:) 方法而不是多次调用这两个方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1 let greeting = &quot;Guten Tag!&quot;
 2 greeting[greeting.startIndex]
 3 // G
 4 greeting[greeting.index(before: greeting.endIndex)]
 5 // !
 6 greeting[greeting.index(after: greeting.startIndex)]
 7 // u
 8 let index = greeting.index(greeting.startIndex, offsetBy: 7)
 9 greeting[index]
10 // a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 indices属性来访问字符串中每个字符的索引。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 for index in greeting.indices {
2     print(&quot;\(greeting[index]) &quot;, terminator: &quot;&quot;)
3 }
4 // Prints &quot;G u t e n   T a g ! &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;前缀和后缀相等性&quot;&gt;前缀和后缀相等性&lt;/h3&gt;
&lt;p&gt;要检查一个字符串是否拥有特定的字符串前缀或者后缀，调用字符串的 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasPrefix(_:)&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;hasSuffix(_:)&lt;/code&gt;方法，它们两个都会接受一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; 类型的实际参数并且返回一个布尔量值。&lt;/p&gt;</content><author><name>james</name></author><category term="blog" /><category term="swift" /><summary type="html">字符串和字符 字符字面量 ✯ 要让多行字符串字面量开始或结束带有换行，写一个空行作为第一行或者是最后一行。比如： ``` “”” This string starts with a line feed. It also ends with a line feed.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/swift_logo.png" /></entry><entry><title type="html">基本运算符</title><link href="http://localhost:4000/blog/2019/01/16/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6" rel="alternate" type="text/html" title="基本运算符" /><published>2019-01-16T14:01:00+08:00</published><updated>2019-01-16T14:01:00+08:00</updated><id>http://localhost:4000/blog/2019/01/16/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6</id><content type="html" xml:base="http://localhost:4000/blog/2019/01/16/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6">&lt;h2 id=&quot;基本运算符&quot;&gt;基本运算符&lt;/h2&gt;
&lt;h3 id=&quot;合并空值运算符&quot;&gt;合并空值运算符&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;合并空值&lt;/strong&gt;运算符 （ a ?? b ）如果可选项 a  有值则展开，如果没有值，是 nil  ，则返回默认值 b 。 &lt;br /&gt;
如果 a  的值是非空的， b  的值将不会被考虑。这就是所谓的 短路计算 。 栗子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 let defaultColorName = &quot;red&quot;
2 var userDefinedColorName: String? // defaults to nil 
3 var colorNameToUse = userDefinedColorName ?? defaultColorName
4 // userDefinedColorName is nil, so colorNameToUse is set to the default of &quot;red&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;混合逻辑运算&quot;&gt;混合逻辑运算&lt;/h3&gt;
&lt;p&gt;Swift 语言中逻辑运算符 &amp;amp;&amp;amp; 和 || 是左相关的，这意味着多个逻辑运算符组合的表达式会首先计算最左边的子表达式。&lt;/p&gt;</content><author><name>james</name></author><category term="blog" /><category term="swift" /><summary type="html">基本运算符 合并空值运算符 合并空值运算符 （ a ?? b ）如果可选项 a 有值则展开，如果没有值，是 nil ，则返回默认值 b 。 如果 a 的值是非空的， b 的值将不会被考虑。这就是所谓的 短路计算 。 栗子：</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/swift_logo.png" /></entry></feed>